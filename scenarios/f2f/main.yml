- name: Set up the gateway
  hosts: gateway
  roles:
    - role: gateway-proxy
    - role: tds-modproxy
  tasks:
    - name: Comment ProxyPass /thredds in esgf-httpd.conf
      replace:
        path: "{{ httpd_conf_file }}"
        regexp: "(ProxyPass /thredds\tajp://localhost:8223/thredds)"
        replace: '#\1'

    - name: Add DocumentRoot {{ httpd_htdocs }} to {{ httpd_conf_file }}
      lineinfile:
        path: "{{ httpd_conf_file }}"
        insertafter: NameVirtualHost \\*:80
        line: DocumentRoot /var/www/html

    - name: Rewrite /thredds to /thredds/catalog/catalog.html
      blockinfile:
        path: "{{ httpd_conf_file }}"
        insertafter: Header always set X-Content-Type-Options nosniff
        block: |
          RewriteEngine on
          RewriteRule   "^/$" "/thredds/catalog/catalog.html" [R]
          RewriteRule   "^/thredds/?$" "/thredds/catalog/catalog.html" [R]

    - name: Plumbing
      include_tasks: gateway.yml

    - name: Restart ESGF node
      command: 'esg-node restart'
      tags: [never, restart]

- name: Set up backend servers
  hosts: backend
  vars:
    # Download TDS in the gateway fails because of selinux and local_action
    ansible_python_interpreter: /usr/bin/python
    
    # Miniconda variables
    miniconda_python: 2
    miniconda_env:
      name: f2f
      channels:
        - birdhouse
      dependencies:
        - libnetcdf=4.4.1
        - supervisor
        - apache-tomcat
  roles:
    - role: miniconda
    - role: tds
    - role: tds-collections
    - role: supervisor-tds
    - role: tds-modproxy
  tasks:
    - name: Remove previous TDS installation
      file:
        state: absent
        path: "{{ tomcat_base }}/{{ item.name }}/webapps/thredds"
      with_items: "{{ tds }}"

    - name: Synchronize thredds
      synchronize:
        src: "/usr/local/tomcat/webapps/thredds"
        dest: "{{ tomcat_base }}/{{ item.name }}/webapps/"
      with_items: "{{ tds }}"

    - name: Syncronize datasets
      synchronize:
        src: /esg/data/
        dest: /esg/data
        archive: True

    - name: Plumb backend
      include_tasks: backend.yml

    - name: restart TDS instances
      supervisorctl:
        name: "{{ item.name }}"
        state: restarted
        supervisorctl_path: "{{ supervisor_bin }}/supervisorctl"
      with_items: "{{ tds }}"
      ignore_errors: True
      tags: [never, restart]
