#!{% if httpd_system ==true %}/usr/bin/python{% else %}{{ virtualenv_home }}/bin/python{% endif %}


"""
Usage:
  update_proxy.py addWorker --gwsEnforced <name> --gwsName <name> --workerName <name> --workerHost <host> --workerPort <port>
  update_proxy.py removeWorker --gwsEnforced <name> --gwsName <name> --workerName <name>
  update_proxy.py -h | --help

Options:
  --gwsEnforced <name>   Group Workspace allow to edit
  --gwsName <name>       Group Workspace you want to edit
  --workerName <name>    Worker's name
  --workerHost <host>      Worker's IP Address
  --workerPort <port>    Worker's Port
"""

from docopt import docopt, DocoptExit
import subprocess
import os, sys

ansible_args=['ansible-playbook']
ansible_args= ansible_args + ['-i', 'localhost,', '-c', 'local']

def addWorker(arguments):

  gwsName = arguments['--gwsName']
  workerName = arguments['--workerName']
  workerHost = arguments['--workerHost']
  workerPort = arguments['--workerPort']

  ## Update GWS
  arguments_GWS=ansible_args + ['{{ ansible_env.HOME }}/update_proxy_GWS.yml']
  arguments_GWS=arguments_GWS + ['--extra-vars', '''operation=present''']
  arguments_GWS=arguments_GWS + ['--extra-vars', '''gwsName=%s''' %gwsName]
  update_GWS = subprocess.call(arguments_GWS)

  ## Update TDS instance
  arguments_TDS_instance=ansible_args + ['{{ ansible_env.HOME }}/update_proxy_TDS.yml']
  arguments_TDS_instance=arguments_TDS_instance + ['--extra-vars', '''operation=present''']
  arguments_TDS_instance=arguments_TDS_instance + ['--extra-vars', '''gwsName=%s''' %gwsName]
  arguments_TDS_instance=arguments_TDS_instance + ['--extra-vars', '''workerName=%s''' %workerName]
  arguments_TDS_instance=arguments_TDS_instance + ['--extra-vars', '''workerHost=%s''' %workerHost]
  arguments_TDS_instance=arguments_TDS_instance + ['--extra-vars', '''workerPort=%s''' %workerPort]
  update_TDS_instances = subprocess.call(arguments_TDS_instance)

def removeWorker(arguments):

  gwsName = arguments['--gwsName']
  workerName = arguments['--workerName']

  ## Update TDS instance
  arguments_TDS_instance=ansible_args + ['{{ ansible_env.HOME }}/update_proxy_TDS.yml']
  arguments_TDS_instance=arguments_TDS_instance + ['--extra-vars', '''operation=absent''']
  arguments_TDS_instance=arguments_TDS_instance + ['--extra-vars', '''gwsName=%s''' %gwsName]
  arguments_TDS_instance=arguments_TDS_instance + ['--extra-vars', '''workerName=%s''' %workerName]
  update_TDS_instances = subprocess.call(arguments_TDS_instance)

  ## Update GWS
  arguments_GWS=ansible_args + ['{{ ansible_env.HOME }}/update_proxy_GWS.yml']
  arguments_GWS=arguments_GWS + ['--extra-vars', '''operation=absent''']
  arguments_GWS=arguments_GWS + ['--extra-vars', '''gwsName=%s''' %gwsName]
  update_GWS = subprocess.call(arguments_GWS)



if __name__ == '__main__':

  try:
    ssh_string=os.getenv('SSH_ORIGINAL_COMMAND')
    args=sys.argv;
    if ssh_string is not None:
      args_ssh = ssh_string.split(" ")
      args =  args + args_ssh
    args.pop(0)
    arguments = docopt(doc=__doc__, argv=args)
    
    if arguments['--gwsEnforced'] != arguments['--gwsName']:
      print('Permission denied')
    else:
      if arguments['addWorker'] == True:
        addWorker(arguments)
      elif arguments['removeWorker'] == True:
        removeWorker(arguments)

    {% if httpd_system == true %}
  subprocess.check_call("sudo service httpd reload".split())
    {% elif httpd_system == false %}
  subprocess.check_call("{{ httpd_home | default(httpd_home_default) }}/bin/apachectl -k graceful".split())
    {% endif %}

  except DocoptExit as e:
    print e.message
