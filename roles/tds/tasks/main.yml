# Catalina base
- name: Set up {{ tomcat_name }}
  file: dest="{{ tomcat_base }}/{{ tomcat_name }}" state=directory

- name: Set up catalina base
  file: path="{{ tomcat_base }}/{{ tomcat_name }}/{{ item }}" state=directory
  with_items: ['bin', 'conf', 'lib', 'logs', 'webapps', 'temp']

- name: Copy web.xml
  copy: src=web.xml dest="{{ tomcat_base }}/{{ tomcat_name }}/conf/web.xml"

- name: Copy context.xml
  copy: src=context.xml dest="{{ tomcat_base }}/{{ tomcat_name }}/conf/context.xml"

- name: Template server.xml
  template: src=server.xml.j2 dest="{{ tomcat_base }}/{{ tomcat_name }}/conf/server.xml"

- name: Template tomcat-users.xml
  template: src=tomcat-users.xml.j2 dest="{{ tomcat_base }}/{{ tomcat_name }}/conf/tomcat-users.xml"

- name: Template setenv.sh
  template: src=setenv.sh.j2 dest="{{ tomcat_base }}/{{ tomcat_name }}/bin/setenv.sh"

- name: Template startup.sh
  template: src=startup.sh.j2 dest="{{ tomcat_base }}/{{ tomcat_name }}/bin/startup.sh" mode=u+x

- name: Template shutdown.sh
  template: src=shutdown.sh.j2 dest="{{ tomcat_base }}/{{ tomcat_name }}/bin/shutdown.sh" mode=u+x

- name: Set up tomcats cluster
  lineinfile:
    path: "{{ tomcat_base }}/{{ tomcat_name }}/conf/server.xml"
    insertbefore: </Host>
    line: <Cluster className="org.apache.catalina.ha.tcp.SimpleTcpCluster"/>
  when: tomcat_cluster

- name: Set up memcached Manager
  include_tasks: memcached-manager.yml
  when: tomcat_manager == "memcached"

- name: Add tomcat as a systemd service
  include_tasks: services/systemd.yml
  when: tomcat_service == "systemd"

- name: Add tomcat as a supervisord service
  include_tasks: services/supervisord.yml
  when: tomcat_service == "supervisord"

# TDS
- name: Download tds
  run_once: True
  local_action: get_url
  args:
    url: "{{ tds_download_url }}"
    dest: "{{ downloads}}/{{ tds_war }}"
  vars:
    ansible_become: False

- name: Create webapps/{{ tds_context }} directory
  file: state=directory path={{ tomcat_base }}/{{ tomcat_name }}/webapps/{{ tds_context }}

- name: Unarchive TDS
  unarchive: src={{ downloads }}/{{ tds_war }} dest={{ tomcat_base }}/{{ tomcat_name }}/webapps/{{ tds_context }}

- name: Update TDS context path
  include_tasks: context.yml
  when: tds_context != 'thredds'

- name: Create content directory
  file: path={{ tds_content }} state=directory

- name: Copy root TDS catalog
  copy: src={{ tds_root_catalog }} dest={{ tds_content }}
  when: tds_root_catalog is defined
  tags: catalogs

- name: Install java melody
  include_tasks: melody.yml
  when: tds_melody

- name: Register TDS as a worker in the cluster
  include_tasks: worker/worker.yml
  when: worker is defined
