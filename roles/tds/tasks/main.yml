- name: Download tds
  run_once: True
  local_action: get_url
  args:
    url: "{{ tds_download_url }}"
    dest: "{{ downloads}}/{{ tds_war }}"
  vars:
    ansible_become: False

- name: Create webapps/{{ tds_context }} directory
  file: state=directory path={{ tomcat_base }}/{{ tomcat_name }}/webapps/{{ tds_context }}

- name: Unarchive TDS
  unarchive: src={{ downloads }}/{{ tds_war }} dest={{ tomcat_base }}/{{ tomcat_name }}/webapps/{{ tds_context }}

- name: Update context path in web.xml
  replace:
    path: "{{ tomcat_base }}/{{ tomcat_name }}/webapps/{{ tds_context }}/WEB-INF/web.xml"
    regexp: <param-value>thredds</param-value>
    replace: <param-value>{{ tds_context }}</param-value>

- name: Update tds.properties
  replace:
    path: "{{ tomcat_base }}/{{ tomcat_name }}/webapps/{{ tds_context }}/WEB-INF/classes/thredds/server/tds.properties"
    regexp: tds.content.path=thredds
    replace: tds.content.path={{ tds_content_path }}

- name: Template applicationContext.xml
  template:
    src: applicationContext.xml.j2
    dest: "{{ tomcat_base }}/{{ tomcat_name }}/webapps/{{ tds_context }}/WEB-INF/applicationContext.xml"

- name: Create content directory
  file: path={{ tds_content }} state=directory

- name: Template threddsConfig.xml
  template: src=threddsConfig.xml.j2 dest={{ tds_content }}/threddsConfig.xml

- name: Copy root TDS catalog
  copy: src={{ tds_root_catalog }} dest={{ tds_content }}
  when: tds_root_catalog is defined
  tags: catalogs

- name: Install java melody
  include_tasks: melody.yml
  when: tds_melody is defined

- name: Set up memcached Manager
  include_tasks: memcached-manager.yml
  when: tomcat_manager == "memcached"

- name: Enable derby
  include_tasks: derby.yml
  when: derby is defined

- name: Register TDS as a worker in the cluster
  include_tasks: worker/worker.yml
